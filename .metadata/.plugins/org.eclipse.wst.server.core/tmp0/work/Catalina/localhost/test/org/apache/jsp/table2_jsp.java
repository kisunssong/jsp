/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.59
 * Generated at: 2020-10-31 08:33:07 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class table2_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<HTML>\r\n");
      out.write("<HEAD><TITLE>표만들기 2탄</TITLE></HEAD>\r\n");
      out.write("<TABLE BORDER=\"1\" ALIGN=\"LEFT\" CELLSPACING=\"10\">\r\n");
      out.write("<!-- CELLSPACING 은 첫테두리와 문자가 들어간 테두리 간격차  -->\r\n");
      out.write("<CAPTION ALIGN=\"TOP\">표만들기 2탄</CAPTION>\r\n");
      out.write("<!-- 표 제목은 해당 TABLE 바로 밑에 태그달기 -->\r\n");
      out.write("<TR><TD>봉댕1<TD>봉댕2</TR>\r\n");
      out.write("<TR><TD>봉댕3<TD>봉댕4</TR>\r\n");
      out.write("</TABLE><P>\r\n");
      out.write("\r\n");
      out.write("<TABLE BORDER=\"1\" ALIGN=\"CENTER\" CELLPADDING=\"20\" >\r\n");
      out.write("<!-- CELLPADDING 은 테두리와 글자사이 공간이 넓어진다 -->\r\n");
      out.write("<TR><TD>봉댕1<TD>봉댕2</TR>\r\n");
      out.write("<TR><TD>봉댕3<TD>봉댕4</TR>\r\n");
      out.write("</TABLE><P>\r\n");
      out.write("\r\n");
      out.write("<TABLE BORDER=\"1\" BGCOLOR=\"RED\">\r\n");
      out.write("<!-- 표 전체 빨간색 -->\r\n");
      out.write("<CAPTION ALIGN=\"TOP\">표 BGCOLOR</CAPTION>\r\n");
      out.write("<TR><TD>봉댕1<TD>봉댕2</TR>\r\n");
      out.write("<TR><TD>봉댕3<TD>봉댕4</TR>\r\n");
      out.write("</TABLE><P>\r\n");
      out.write("\r\n");
      out.write("<TABLE BORDER=\"3\" BORDERCOLOR=\"BLUE\">\r\n");
      out.write("<!-- 표 첫줄과 값줄 사이에 컬러를 넣는다 -->\r\n");
      out.write("<CAPTION ALIGN=\"TOP\">표  BORDERCOLOR</CAPTION>\r\n");
      out.write("<TR BGCOLOR=\"RED\"><TD>월<TD>화<TD>수<TD>목<TD>금</TR>\r\n");
      out.write("<!-- 첫 줄 칸에 빨간색 -->\r\n");
      out.write("<TR><TD BGCOLOR=\"YELLOW\">1교시<TD>2교시<TD>3교시<TD>4교시<TD>5교시</TR>\r\n");
      out.write("<!-- 1교시 칸에만 노란색으로 넣는다 -->\r\n");
      out.write("</TABLE>\r\n");
      out.write("</HTML>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
